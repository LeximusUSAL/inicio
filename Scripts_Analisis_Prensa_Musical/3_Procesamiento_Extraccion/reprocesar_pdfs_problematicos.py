#!/usr/bin/env python3
import os
from pdfminer.high_level import extract_text
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from io import StringIO

def extraer_con_metodo_alternativo(ruta_pdf):
    """M√©todo alternativo para PDFs problem√°ticos"""
    try:
        output_string = StringIO()
        with open(ruta_pdf, 'rb') as file:
            rsrcmgr = PDFResourceManager()
            device = TextConverter(rsrcmgr, output_string, laparams=LAParams())
            interpreter = PDFPageInterpreter(rsrcmgr, device)

            for page in PDFPage.get_pages(file, check_extractable=False):
                interpreter.process_page(page)

            device.close()
            texto = output_string.getvalue()
            output_string.close()

        return texto
    except Exception as e:
        print(f"Error con m√©todo alternativo: {e}")
        return None

def extraer_texto_robusto(ruta_pdf):
    """Extracci√≥n robusta con m√∫ltiples m√©todos"""
    print(f"Intentando extraer: {os.path.basename(ruta_pdf)}")

    # M√©todo 1: extract_text b√°sico
    try:
        texto = extract_text(ruta_pdf, check_extractable=False)
        if texto and len(texto.strip()) > 100:  # Verificar que hay contenido sustancial
            print("  ‚úì M√©todo b√°sico exitoso")
            return texto
        else:
            print("  ‚ö† M√©todo b√°sico: poco contenido")
    except Exception as e:
        print(f"  ‚úó M√©todo b√°sico fall√≥: {e}")

    # M√©todo 2: Con par√°metros espec√≠ficos
    try:
        texto = extract_text(ruta_pdf,
                           check_extractable=False,
                           password='',
                           maxpages=0,
                           caching=True)
        if texto and len(texto.strip()) > 100:
            print("  ‚úì M√©todo con par√°metros exitoso")
            return texto
        else:
            print("  ‚ö† M√©todo con par√°metros: poco contenido")
    except Exception as e:
        print(f"  ‚úó M√©todo con par√°metros fall√≥: {e}")

    # M√©todo 3: Alternativo manual
    texto = extraer_con_metodo_alternativo(ruta_pdf)
    if texto and len(texto.strip()) > 100:
        print("  ‚úì M√©todo alternativo exitoso")
        return texto
    else:
        print("  ‚úó M√©todo alternativo: poco o ning√∫n contenido")

    return None

def reprocesar_archivos_problematicos():
    """Reprocesa archivos que fallaron"""
    directorio_pdfs = "/Users/maria/Downloads/BIBLIOGRAF√çA. Historiograf√≠a-20250929"
    directorio_salida = "/Users/maria/Downloads/textos_extraidos_bibliografia"

    archivos_problematicos = [
        "BRITO_1989._Musicologia_e_Historiografia_portuguesa.pdf",
        "CARRERAS_1994._Historiografia_musical.pdf",
        "FERREIRA_1992._Historiografia_Portugal_XIX.pdf",
        "RIEGER_1986._Dolce_semplice._El_papel_de_las_mujeres_en_la_musica.pdf",
        "STROHM_1999._Postmodern_thought_and_the_History_of_Music.pdf",
        "VIRGILI_BLANQUET_2004._La_musica_religiosa_en_el_siglo_XIX_espanol.pdf",
        "Weber 1999. The History of Musical Canon.pdf"
    ]

    print("=== Reprocesando archivos problem√°ticos ===\n")

    for nombre_archivo in archivos_problematicos:
        ruta_pdf = os.path.join(directorio_pdfs, nombre_archivo)

        if not os.path.exists(ruta_pdf):
            print(f"‚ùå No encontrado: {nombre_archivo}")
            continue

        # Extraer texto con m√©todos robustos
        texto = extraer_texto_robusto(ruta_pdf)

        if texto:
            # Guardar resultado
            nombre_base = os.path.splitext(nombre_archivo)[0]
            archivo_txt = os.path.join(directorio_salida, f"{nombre_base}.txt")

            try:
                with open(archivo_txt, 'w', encoding='utf-8') as f:
                    f.write(texto)
                print(f"  üíæ Guardado: {len(texto)} caracteres")
                print(f"     {archivo_txt}")
            except Exception as e:
                print(f"  ‚ùå Error guardando: {e}")
        else:
            print(f"  ‚ùå No se pudo extraer texto de {nombre_archivo}")

        print()  # L√≠nea en blanco

if __name__ == "__main__":
    reprocesar_archivos_problematicos()
    print("¬°Reprocesamiento completado!")